#!/usr/bin/perl -w


#get rid of %rhelsub


# CHANGE LOG
# ----------
#  2021-05-30	njeffrey	Script created
#  2021-07-26	njeffrey	Update get_subscription_status subroutine to detect "Not Subscribed"
#  2021-11-23	njeffrey	Confirm perimeter firewall allows connectivity to https://subscription.rhsm.redhat.com
#  2022-03-25	njeffrey	Skip expiration date calculations if perimeter firewall does not allow connections to https://subscription.rhsm.redhat.com:443
#  2022-03-25	njeffrey	Add get_overall_status subroutine
#  2022-03-30	njeffrey	Remove nmap -p 443 subscription.rhsm.redhat.com (because nmap cannot use any proxy server defined in /etc/yum.conf)
#  2022-04-09	njeffrey	Documentation updates
#  2022-05-12	njeffrey	Add nagios performance data to output
#  2022-06-30	njeffrey	Add detection for status=Invalid for an expired subscription
#  2022-06-30	njeffrey	Change warning period from 30 days to 7 days
#  2024-10-30	njeffrey	/usr/bin/subscription-manager version 1.24 and above will report Status:Disabled if Simple Content Access mode is enabled https://access.redhat.com/solutions/5060001



# nagios check to verify Red Hat Enterprise Linux subscription status
#
# The subscription-manager command requires root priviles to run, 
# so run this script daily from the root crontab to generate a file the nagios check can read


# CONFIGURATION
# -------------
#  Create a crontab entry for the root user similar to:
#  59 * * * * /usr/local/nagios/libexec/check_rhel_subscription   #nagios helper script
#
#  This script is executed remotely on a monitored system by the NRPE or check_by_ssh
#  methods available in nagios.  
#
#  If you hare using the check_by_ssh method, you will need a section in the services.cfg
#  file on the nagios server that looks similar to the following.
#  This assumes that you already have ssh key pairs configured.
#  # Define service for checking RHEL subscription status
#  define service{
#     use                             generic-service
#     hostgroup_name                  all_rhel
#     service_description             RHEL subscription
#     check_interval                  1440     ; only check every 1440 minutes (24 hours)
#     check_command                   check_by_ssh!/usr/local/nagios/libexec/check_rhel_subscription
#     }
#
#  Alternatively, if you are using the NRPE method, you should have a section similar to the following in 
#  the services.cfg file:
#  define service{
#     use                             generic-service
#     hostgroup_name                  all_rhel
#     service_description             RHEL subscription
#     check_command                   check_nrpe!check_rhel_subscription
#     check_interval           	      1440     ; only check every 1440 minutes (24 hours)
#     }
#
#  If you are using the NRPE method, you will also need a command definition similar to the following on each monitored host
#  in the /usr/local/nagios/nrpe/nrpe.cfg file:
#      command[check_rhel_subscription]=/usr/local/nagios/libexec/check_rhel_subscription




# TROUBLESHOOTING
# ---------------
#
#   This script requires root privileges to run the subscription-manager command
#
#   Rather than give the nagios user and additional privileges, this script will run hourly from the root crontab,
#   generating a /tmp/nagios.check_rhel_subscription.tmp file.  
#   This file will be read by the low-privileged nagios user when the check is run from nagios.
#   Ensure the root crontab has an entry similar to the following:
#   59 * * * * /usr/local/nagios/libexec/check_rhel_subscription   #nagios helper script




use strict;							#enforce good coding practices
use Getopt::Long;                      		 		#allow --long-switches to be used as parameters
use Time::Local;						#perform date/time calculations   yum install perl-Time-Local


# Declare variables
my ($product_id,$days_warn,$days_crit,$subscriptionmanager,$cmd,%rhelsub);
my ($sec, $min, $hour, $mday, $mon, $year);
my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,$blksize,$blocks);
my ($epoch_seconds_timestamp,$epoch_seconds_now);
my ($output_filename,$output_file_age,$output_message,$common_output_data,$perf_data,$verbose,$days_until_expiry);
my ($opt_h,$opt_v,$opt_w,$opt_c);
my ($OK,$WARN,$CRITICAL,$UNKNOWN,$CHECK_NAME);
$product_id          = 479;					#Product ID 479 is RHEL
$days_warn           = 7;					#default value, can be overridden with --warn=#
$days_crit           = 1;					#default value, can be overridden with --crit=#
$days_until_expiry   = 0;					#initialize variable to avoid undef errors
$subscriptionmanager = "/usr/bin/subscription-manager";		#location of binary
$verbose = "no";						#yes|no flag to increase verbosity for debugging
$CHECK_NAME = "RHEL subscription";
#
# Nagios return codes
#
$OK=		0;
$WARN=		1;
$CRITICAL=	2;
$UNKNOWN=	3;





sub get_options {
   #
   # this gets the command line parameters provided by the users
   #
   print "Running get_options subroutine \n" if ($verbose eq "yes");
   Getopt::Long::Configure('bundling');
   GetOptions(
      "h"   => \$opt_h, "help"    => \$opt_h,
      "v"   => \$opt_v, "verbose" => \$opt_v,
      "w=i" => \$opt_w, "warn=i"  => \$opt_w,  "warning=i"  => \$opt_w,
      "c=i" => \$opt_c, "crit=i"  => \$opt_c,  "critical=i" => \$opt_c,
   );
   #
   # If the user supplied the -h or --help switch, give them some help.
   #
   if( defined( $opt_h ) ) {
      print "Use this syntax \n";
      print "   $0 \n";
      print "   $0 --verbose     (increase output for debugging \n";
      print "   $0 --warn=#      (# of days to warn     before subscription expiry \n";
      print "   $0 --crit=#      (# of days to critical before subscription expiry \n";
      exit $CRITICAL;				#exit script
   }
   #
   # If the user supplied the --verbose switch, increase output verbosity
   #
   if( defined( $opt_v ) ) {
      $verbose = "yes";
   } else {
      $verbose = "no";
   }
   #
   # If the user provided -w or --warn or --warning parameter, use that value as the number of days to warn on
   #
   if( defined( $opt_w ) ) {
      $days_warn = $opt_w;
      print "   setting warning threshold to $days_warn days \n" if ($verbose eq "yes");
   }
   #
   # If the user provided -c or --crit or --critical parameter, use that value as the number of days to warn on
   #
   if( defined( $opt_c ) ) {
      $days_crit = $opt_c;
      print "   setting critical threshold to $days_crit days \n" if ($verbose eq "yes");
   }
}						                       #end of subroutine





sub sanity_checks {
   #
   print "Running sanity_checks subroutine \n" if ($verbose eq "yes");
   #
   # confirm /usr/sbin/subscription-manager file exists 
   if ( ! -e $subscriptionmanager ) {
      print "ERROR: Cannot find $subscriptionmanager \n";
      exit $CRITICAL;
   }
   #
   # confirm /usr/sbin/subscription-manager file exists 
   if ( ! -e $subscriptionmanager ) {
      print "ERROR: Cannot find $subscriptionmanager \n";
      exit $CRITICAL;
   }
}									#end of subroutine








sub check_for_output_file {
   #
   # a cron job may have already created the output file that we need
   #
   print "running check_for_output_file subroutine \n" if ($verbose eq "yes");
   #
   $output_filename = "/tmp/nagios.check_rhel_subscription.tmp";
   #
   #
   if ( -e "$output_filename" )  {             				#see if a cron job has already provided the info we need
      ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,$blksize,$blocks) = stat($output_filename); #get last modification time in seconds since the epoch
      $output_file_age = time - $mtime;                                 #figure out how many seconds old the file is
      print "   output file $output_filename is $output_file_age seconds old \n" if ($verbose eq "yes");
      #
      # Delete the output file if it is more than 1440 seconds (4 hours) old.
      # This section only runs when executed from the root crontab, because 
      # write permissions to the output file are required.
      #
      if ( (-w $output_filename) && ($output_file_age >= 1440) ) {     	#see if the file is writable and more than 1440 seconds (4 hours) old
         print "   deleting old copy of $output_filename \n" if ($verbose eq "yes");
         unlink "$output_filename";                                  	#delete the file, which causes the rest of the script to run
      }
      #
      # This section runs if the temporary file is too old, 
      # which usually means the root crontab is not running this script.
      #
      if ( (-e "$output_filename") && ($output_file_age >= 86400) ) {   #raise an alert if the file is more than 86400 seconds (24 hours) old
         print "$CHECK_NAME WARN - temporary file $output_filename not being automatically created via cron.  Please investigate. \n";
         exit $WARN;                                                    #exit script
      }									#end of if block
   }                                                                    #end of if block
   #
   # This section runs when the temporary file exists and is not too old.
   # The expectation is that this section is run by the low-privilege nagios user.
   #
   if ( -e "$output_filename" ) {   		            		#see if a cron job has already provided the info we need
      open (OUT,"$output_filename") or die "Cannot open $output_filename for reading $! \n";
      while (<OUT>) {                                                   #read a line from the text file
         $output_message = $_  if ( $_ =~ /[a-zA-Z]/);                  #get the content of the output file into a variable
         print "   output message is $output_message \n" if ($verbose eq "yes");
      }                                                                 #end of while loop
      close OUT;                                                        #close filehandle
      print $output_message;                                            #print the content of the output file
      exit $CRITICAL if ( $output_message =~ /CRITICAL/ );              #exit script with appropriate return code
      exit $WARN     if ( $output_message =~ /WARN/ );                  #exit script with appropriate return code
      exit $UNKNOWN  if ( $output_message =~ /UNKNOWN/ );               #exit script with appropriate return code
      exit $OK       if ( $output_message =~ /OK/ );                    #exit script with appropriate return code
   }                                                                    #end of if block
}                                                                       #end of subroutine





sub print_to_outputfile {
   #
   print "running print_to_outputfile \n" if ($verbose eq "yes");
   #
   # This subroutine is called whenever an output message is printed, to confirm that the $output_file exists
   #
   # confirm the output message exists
   $output_message = "$CHECK_NAME UNKNOWN - could not parse response from remote host \n" unless ($output_message);
   #
   # confirm the $output_filename variable is defined
   unless ($output_filename) {
      print "$CHECK_NAME UNKNOWN - the \$output_filename variable is not defined.  This might be a script bug. \n";
      exit $UNKNOWN;                                                            #only get this far if OK/WARN/CRITICAL/UNKNOWN was not found in the output file
   }                                                                            #end of unless block
   #
   if ( ! -e "$output_filename" ) {                                                     #only run this section if $output_filename does not already exist
      print "   $output_filename not found - writing output message to $output_filename \n" if ($verbose eq "yes");
      open (OUT,">$output_filename") or die "Cannot open $output_filename for writing: $! \n";
      print OUT "$output_message";
      close OUT;                                                                #close filehandle
      chmod 0644, "$output_filename";                                           #set the file permission to -rw-r--r-- to ensure nagios user can read file
   }                                                                            #end of if block
}                                                                               #end of subroutine




sub check_overall_status {
   #
   print "running check_overall_status subroutine \n" if ($verbose eq "yes");
   #
   # Output of command will be similar to the following for a machine with a valid subscription:
   #  /usr/sbin/subscription-manager status
   #     +---------------------+
   #      System Status Details
   #     +---------------------+
   #     Overall Status: Current           <----- this is the line we are looking for
   #     System Purpose Status: Unknown
   #
   # Output of command will be similar to the following for a machine withOUT a valid subscription:
   #  /usr/sbin/subscription-manager status
   #     +---------------------+
   #      System Status Details
   #     +---------------------+
   #     Overall Status: Unknown        <----- this is the line we are looking for
   #     System Purpose Status: Unknown
   #
   # Output of command will be similar to the following for a machine with an expired subscription:
   #  /usr/sbin/subscription-manager status
   #  +-------------------------------------------+
   #     System Status Details
   #     +-------------------------------------------+
   #     Overall Status: Invalid
   #
   #     Red Hat Enterprise Linux for x86_64:
   #     - Not supported by a valid subscription.
   #
   #     Red Hat CodeReady Linux Builder for x86_64:
   #     - Not supported by a valid subscription.
   #
   #
   # Output of command with subscription-manager 1.24 of higher
   # Refer to https://access.redhat.com/solutions/5060001
   # +-------------------------------------------+
   #    System Status Details
   # +-------------------------------------------+
   # Overall Status: Disabled                  <---- this is ok if Simple Content Access mode is enabled on the next line
   # Content Access Mode is set to Simple Content Access. This host has access to content, regardless of subscription status.
   # System Purpose Status: Disabled
   #
   #
   $rhelsub{OverallStatus} = "unknown";				#initialize hash element to avoid undef errors
   #
   $cmd = "$subscriptionmanager status";  
   print "   running command: $cmd \n" if ($verbose eq "yes");
   open (IN,"$cmd 2>&1|");	#open filehandle
   while (<IN>) {						#read a line from the filehandle
      if ( /Overall Status: Current/ ) {
         $rhelsub{OverallStatus} = "Current";			#assign value to hash
      }
      if ( /Overall Status: Unknown/ ) {
         $rhelsub{OverallStatus} = "unknown";			#assign value to hash
      }
      if ( /Overall Status: Invalid/ ) {
         $rhelsub{OverallStatus} = "Invalid";			#assign value to hash
      }
      if ( /Content Access Mode is set to Simple Content Access. This host has access to content, regardless of subscription status./ ) {
         $rhelsub{OverallStatus} = "SimpleContentAccess";			#assign value to hash
      }
   }								#end of while loop
   close IN;							#close filehandle
   print "   overall status is $rhelsub{OverallStatus} \n" if ($verbose eq "yes");
}                                               		#end of subroutine




sub get_subscription_status {
   #
   print "running get_subscription_status subroutine \n" if ($verbose eq "yes");
   #
   # Output of command will be similar to the following for a machine with a valid subscription:
   #  /usr/sbin/subscription-manager list --matches=479
   #  +-------------------------------------------+
   #    Installed Product Status
   #  +-------------------------------------------+
   #  Product Name:   Red Hat Enterprise Linux for x86_64
   #  Product ID:     479
   #  Version:        8.4
   #  Arch:           x86_64
   #  Status:         Subscribed
   #  Status Details:
   #  Starts:         06/30/2020
   #  Ends:           06/30/2021
   #
   #
   # Output of command will be similar to the following for a machine without a valid subscription:
   # +-------------------------------------------+
   # Installed Product Status
   # +-------------------------------------------+
   # Product Name:   Red Hat Enterprise Linux for x86_64
   # Product ID:     479
   # Version:        8.4
   # Arch:           x86_64
   # Status:         Not Subscribed
   # Status Details: Not supported by a valid subscription.
   # Starts:
   # Ends:
   #
   $rhelsub{Status} = "unknown";				#initialize hash element to avoid undef errors
   #
   $cmd = "$subscriptionmanager list --matches=$product_id";  
   print "   running command: $cmd \n" if ($verbose eq "yes");
   open (IN,"$cmd 2>&1|");	#open filehandle
   while (<IN>) {						#read a line from the filehandle
      if ( /Status: +([a-zA-Z0-9 ]+)/ ) {			#parse out Status line from command output
         $rhelsub{Status} = $1;					#assign value to hash
      }								#end of if block
      if ( /Ends: +([0-9]{2})\/([0-9]{2})\/([0-9]{4})/ ) {	#look for local-dependent mm/dd/yyyy format
         $mon   = $1;						#assign value to variable
         $mday  = $2;						#assign value to variable
         $year  = $3;						#assign value to variable
         $rhelsub{Ends} = "$mon\/$mday\/$year";			#put mm/dd/yyyy into hash as human readable output
      }								#end of if block
      if ( /Ends: +([0-9]{4})\-([0-9]{2})\-([0-9]{2})/ ) {	#look for locale-dependent yyyy-mm-dd format
         $mon   = $2;						#assign value to variable
         $mday  = $3;						#assign value to variable
         $year  = $1;						#assign value to variable
         $rhelsub{Ends} = "$year-$mon\/$mday";			#put yyy-mm-dd into hash as human readable output
      }								#end of if block
   }								#end of while loop
   close IN;							#close filehandle
   #
   if ( $rhelsub{Status} eq "Subscribed" ) {
      # 
      # This section will figure out how many days until subscription expires
      # convert the yyyy-mm-dd date in the subscription expiry to seconds since the epoch  (decrement $mon by 1 and decrement $year by 1900)
      # 
      $sec=0; $min=0; $hour=0;					#ignore seconds/minutes/hours, granularity to a single day is fine
      $epoch_seconds_timestamp = timelocal( $sec, $min, $hour, $mday, $mon-1, $year-1900);		#use Time::Local module to convert yyyy-mm-dd hh:mm:ss to epoch
      $epoch_seconds_now = time;				#seconds since epoch
      print "current seconds since epoch is $epoch_seconds_now \n" if ($verbose eq "yes");
      print "subscription expiry is $year-$mon-$mday $hour:$min:$sec is $epoch_seconds_timestamp seconds since epoch \n" if ($verbose eq "yes");
      $days_until_expiry =  $epoch_seconds_timestamp-$epoch_seconds_now ;
      print "epoch_seconds_timestamp-epoch_seconds_now = $epoch_seconds_timestamp-$epoch_seconds_now = $days_until_expiry seconds from now \n" if ($verbose eq "yes");
      $days_until_expiry = $days_until_expiry / 86400;				#convert seconds to days
      $days_until_expiry = sprintf("%.0f",$days_until_expiry);			#truncate to 0 decimal places, closest day is good enough
      print "Subscription expires in $days_until_expiry days \n" if ($verbose eq "yes");
   }								#end of if block
}                                               		#end of subroutine








sub print_output {
   #
   print "Running print_output subroutine \n" if ($verbose eq "yes");
   #
   $common_output_data = "";
   $perf_data = "days_until_expiry=$days_until_expiry;;;;";
   #
   if ( $rhelsub{OverallStatus} eq "SimpleContentAccess"  ) {
      $output_message = "$CHECK_NAME OK - RHEL subscription is using Simple Content Access mode | $perf_data \n";
      print_to_outputfile;           				#call subroutine to confirm the output is in the $output_filename used for subsequent script runs
      print $output_message;
      exit $OK;
   }
   if ( $rhelsub{OverallStatus} eq "Invalid"  ) {
      $output_message = "$CHECK_NAME WARN - RHEL subscription status is expired.  Please add a subscription with: $subscriptionmanager register --auto-attach --username you\@example.com --password=YourPass | $perf_data \n";
      print_to_outputfile;           				#call subroutine to confirm the output is in the $output_filename used for subsequent script runs
      print $output_message;
      exit $WARN;
   }
   if ( ($rhelsub{OverallStatus} eq "Current" ) && ($rhelsub{Status} eq "unknown") ) {
      $output_message = "$CHECK_NAME OK - RHEL subscription status is currently active, but the expiration date cannot be determined because the $subscriptionmanager command could not establish a connection to https://subscription.rhm.redhat.com:443 . Please check /etc/yum.conf to see if a proxy server is required for Internet access.   $common_output_data | $perf_data \n";
      print_to_outputfile;           				#call subroutine to confirm the output is in the $output_filename used for subsequent script runs
      print $output_message;
      exit $UNKNOWN;
   }
   #
   if ( ($rhelsub{OverallStatus} ne "Current") && ($rhelsub{Status} ne "Subscribed") ) {
      $output_message = "$CHECK_NAME CRITICAL - RHEL subscription status could not be determined.  Please add a subscription with subscription-manager  $common_output_data | $perf_data \n";
      print_to_outputfile;           				#call subroutine to confirm the output is in the $output_filename used for subsequent script runs
      print $output_message;
      exit $CRITICAL;
   }
   #
   if ( $rhelsub{Status} eq "Not Subscribed" ) {
      $output_message = "$CHECK_NAME CRITICAL - RHEL subscription is Not Subscribed.  Please add a subscription with subscription-manager  $common_output_data | $perf_data \n";
      print_to_outputfile;           				#call subroutine to confirm the output is in the $output_filename used for subsequent script runs
      print $output_message;
      exit $CRITICAL;
   }
   if ( $days_until_expiry <= $days_crit ) {
      $output_message = "$CHECK_NAME CRITICAL - RHEL subscription expired  $common_output_data | $perf_data \n";
      print_to_outputfile;           				#call subroutine to confirm the output is in the $output_filename used for subsequent script runs
      print $output_message;
      exit $CRITICAL;
   }
   if ( $days_until_expiry < $days_warn ) {
      $output_message = "$CHECK_NAME WARN - RHEL subscription will be expiring on $rhelsub{Ends}, please renew subscription.  $common_output_data | $perf_data \n";
      print_to_outputfile;           				#call subroutine to confirm the output is in the $output_filename used for subsequent script runs
      print $output_message;
      exit $WARN;
   }
   # should only get here if everything is ok
   if ( $days_until_expiry >= $days_warn ) {
      $output_message = "$CHECK_NAME OK - RHEL subscription will expire on $rhelsub{Ends}  $common_output_data | $perf_data \n";
      print_to_outputfile;           				#call subroutine to confirm the output is in the $output_filename used for subsequent script runs
      print $output_message;
      exit $OK;
   }
}			#end of subroutine




# ---------------- main body of script -------------------------
get_options;
sanity_checks;
check_for_output_file;
check_overall_status;
get_subscription_status;
print_output;






